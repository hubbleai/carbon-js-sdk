/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import TokenResponse from '../model/TokenResponse';
import WhiteLabelingResponse from '../model/WhiteLabelingResponse';

/**
* Auth service.
* @module api/AuthApi
* @version 1.0.0
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAccessTokenAuthV1AccessTokenGet operation.
     * @callback module:api/AuthApi~getAccessTokenAuthV1AccessTokenGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Access Token
     * @param {String} authorization 
     * @param {String} customerId 
     * @param {module:api/AuthApi~getAccessTokenAuthV1AccessTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResponse}
     */
    getAccessTokenAuthV1AccessTokenGet(authorization, customerId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getAccessTokenAuthV1AccessTokenGet");
      }
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getAccessTokenAuthV1AccessTokenGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': customerId
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TokenResponse;
      return this.apiClient.callApi(
        '/auth/v1/access_token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWhiteLabelingAuthV1WhiteLabelingGet operation.
     * @callback module:api/AuthApi~getWhiteLabelingAuthV1WhiteLabelingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WhiteLabelingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get White Labeling
     * Returns whether or not the organization is white labeled and which integrations are white labeled  :param current_user: the current user :param db: the database session :return: a WhiteLabelingResponse
     * @param {String} authorization 
     * @param {module:api/AuthApi~getWhiteLabelingAuthV1WhiteLabelingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WhiteLabelingResponse}
     */
    getWhiteLabelingAuthV1WhiteLabelingGet(authorization, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getWhiteLabelingAuthV1WhiteLabelingGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WhiteLabelingResponse;
      return this.apiClient.callApi(
        '/auth/v1/white_labeling', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
