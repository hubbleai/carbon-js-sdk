/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericSuccessResponse from '../model/GenericSuccessResponse';
import HTTPValidationError from '../model/HTTPValidationError';
import OrganizationUserDataSourceQueryInput from '../model/OrganizationUserDataSourceQueryInput';
import OrganizationUserDataSourceResponse from '../model/OrganizationUserDataSourceResponse';
import RevokeAccessTokenInput from '../model/RevokeAccessTokenInput';

/**
* DataSources service.
* @module api/DataSourcesApi
* @version 1.0.0
*/
export default class DataSourcesApi {

    /**
    * Constructs a new DataSourcesApi. 
    * @alias module:api/DataSourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the revokeAccessTokenRevokeAccessTokenPost operation.
     * @callback module:api/DataSourcesApi~revokeAccessTokenRevokeAccessTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke Access Token
     * @param {String} authorization 
     * @param {module:model/RevokeAccessTokenInput} revokeAccessTokenInput 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/DataSourcesApi~revokeAccessTokenRevokeAccessTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    revokeAccessTokenRevokeAccessTokenPost(authorization, revokeAccessTokenInput, opts, callback) {
      opts = opts || {};
      let postBody = revokeAccessTokenInput;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling revokeAccessTokenRevokeAccessTokenPost");
      }
      // verify the required parameter 'revokeAccessTokenInput' is set
      if (revokeAccessTokenInput === undefined || revokeAccessTokenInput === null) {
        throw new Error("Missing the required parameter 'revokeAccessTokenInput' when calling revokeAccessTokenRevokeAccessTokenPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/revoke_access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userDataSourcesUserDataSourcesPost operation.
     * @callback module:api/DataSourcesApi~userDataSourcesUserDataSourcesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationUserDataSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Data Sources
     * @param {String} authorization 
     * @param {module:model/OrganizationUserDataSourceQueryInput} organizationUserDataSourceQueryInput 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/DataSourcesApi~userDataSourcesUserDataSourcesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationUserDataSourceResponse}
     */
    userDataSourcesUserDataSourcesPost(authorization, organizationUserDataSourceQueryInput, opts, callback) {
      opts = opts || {};
      let postBody = organizationUserDataSourceQueryInput;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling userDataSourcesUserDataSourcesPost");
      }
      // verify the required parameter 'organizationUserDataSourceQueryInput' is set
      if (organizationUserDataSourceQueryInput === undefined || organizationUserDataSourceQueryInput === null) {
        throw new Error("Missing the required parameter 'organizationUserDataSourceQueryInput' when calling userDataSourcesUserDataSourcesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationUserDataSourceResponse;
      return this.apiClient.callApi(
        '/user_data_sources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
