/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FetchURLsResponse from '../model/FetchURLsResponse';
import HTTPValidationError from '../model/HTTPValidationError';
import SitemapScrapeRequest from '../model/SitemapScrapeRequest';
import WebscrapeRequest from '../model/WebscrapeRequest';
import YoutubeTranscriptResponse from '../model/YoutubeTranscriptResponse';

/**
* Utilities service.
* @module api/UtilitiesApi
* @version 1.0.0
*/
export default class UtilitiesApi {

    /**
    * Constructs a new UtilitiesApi. 
    * @alias module:api/UtilitiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fetchUrlsFetchUrlsGet operation.
     * @callback module:api/UtilitiesApi~fetchUrlsFetchUrlsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FetchURLsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Urls
     * Extracts all URLs from a webpage.   Args:     url (str): URL of the webpage  Returns:     FetchURLsResponse: A response object with a list of URLs extracted from the webpage and the webpage content.
     * @param {Object} url 
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/UtilitiesApi~fetchUrlsFetchUrlsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FetchURLsResponse}
     */
    fetchUrlsFetchUrlsGet(url, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling fetchUrlsFetchUrlsGet");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling fetchUrlsFetchUrlsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FetchURLsResponse;
      return this.apiClient.callApi(
        '/fetch_urls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchYoutubeTranscriptsFetchYoutubeTranscriptGet operation.
     * @callback module:api/UtilitiesApi~fetchYoutubeTranscriptsFetchYoutubeTranscriptGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/YoutubeTranscriptResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch Youtube Transcripts
     * Fetches english transcripts from YouTube videos.  Args:     id (str): The ID of the YouTube video.      raw (bool): Whether to return the raw transcript or not. Defaults to False.  Returns:     dict: A dictionary with the transcript of the YouTube video.
     * @param {Object} id 
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {Object} [raw] 
     * @param {String} [customerId] 
     * @param {module:api/UtilitiesApi~fetchYoutubeTranscriptsFetchYoutubeTranscriptGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/YoutubeTranscriptResponse}
     */
    fetchYoutubeTranscriptsFetchYoutubeTranscriptGet(id, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchYoutubeTranscriptsFetchYoutubeTranscriptGet");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling fetchYoutubeTranscriptsFetchYoutubeTranscriptGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'raw': opts['raw']
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = YoutubeTranscriptResponse;
      return this.apiClient.callApi(
        '/fetch_youtube_transcript', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scrapeSitemapScrapeSitemapPost operation.
     * @callback module:api/UtilitiesApi~scrapeSitemapScrapeSitemapPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scrape Sitemap
     * Extracts all URLs from a sitemap and performs a web scrape on each of them.  Args:     sitemap_url (str): URL of the sitemap  Returns:     dict: A response object with the status of the scraping job message.-->
     * @param {String} authorization 
     * @param {module:model/SitemapScrapeRequest} sitemapScrapeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/UtilitiesApi~scrapeSitemapScrapeSitemapPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    scrapeSitemapScrapeSitemapPost(authorization, sitemapScrapeRequest, opts, callback) {
      opts = opts || {};
      let postBody = sitemapScrapeRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling scrapeSitemapScrapeSitemapPost");
      }
      // verify the required parameter 'sitemapScrapeRequest' is set
      if (sitemapScrapeRequest === undefined || sitemapScrapeRequest === null) {
        throw new Error("Missing the required parameter 'sitemapScrapeRequest' when calling scrapeSitemapScrapeSitemapPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/scrape_sitemap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUrlsSearchUrlsGet operation.
     * @callback module:api/UtilitiesApi~searchUrlsSearchUrlsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FetchURLsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search Urls
     * Perform a web search and obtain a list of relevant URLs.  As an illustration, when you perform a search for “content related to MRNA,” you will receive a list of links such as the following:      - https://tomrenz.substack.com/p/mrna-and-why-it-matters      - https://www.statnews.com/2020/11/10/the-story-of-mrna-how-a-once-dismissed-idea-became-a-leading-technology-in-the-covid-vaccine-race/      - https://www.statnews.com/2022/11/16/covid-19-vaccines-were-a-success-but-mrna-still-has-a-delivery-problem/          - https://joomi.substack.com/p/were-still-being-misled-about-how  Subsequently, you can submit these links to the web_scrape endpoint in order to retrieve the content of the respective web pages.  Args:     query (str): Query to search for  Returns:     FetchURLsResponse: A response object with a list of URLs for a given search query.
     * @param {Object} query 
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/UtilitiesApi~searchUrlsSearchUrlsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FetchURLsResponse}
     */
    searchUrlsSearchUrlsGet(query, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchUrlsSearchUrlsGet");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling searchUrlsSearchUrlsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FetchURLsResponse;
      return this.apiClient.callApi(
        '/search_urls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitemapProcessSitemapGet operation.
     * @callback module:api/UtilitiesApi~sitemapProcessSitemapGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sitemap
     * Retrieves all URLs from a sitemap, which can subsequently be utilized with our `web_scrape` endpoint.  <!--Args:     url (str): URL of the sitemap  Returns:     dict: A dictionary with a list of URLs extracted from the sitemap.-->
     * @param {Object} url 
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/UtilitiesApi~sitemapProcessSitemapGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    sitemapProcessSitemapGet(url, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling sitemapProcessSitemapGet");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling sitemapProcessSitemapGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/process_sitemap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webScrapeWebScrapePost operation.
     * @callback module:api/UtilitiesApi~webScrapeWebScrapePostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Web Scrape
     * Conduct a web scrape on a given webpage URL. Our web scraper is fully compatible with JavaScript and supports recursion depth, enabling you to efficiently extract all content from the target website.  <!--Args:     scraping_requests (List[WebscrapeRequest]): A list of WebscrapeRequest objects.      Returns:     dict: A response object with the status of the scraping job message.-->
     * @param {String} authorization 
     * @param {Array.<module:model/WebscrapeRequest>} webscrapeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/UtilitiesApi~webScrapeWebScrapePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    webScrapeWebScrapePost(authorization, webscrapeRequest, opts, callback) {
      opts = opts || {};
      let postBody = webscrapeRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling webScrapeWebScrapePost");
      }
      // verify the required parameter 'webscrapeRequest' is set
      if (webscrapeRequest === undefined || webscrapeRequest === null) {
        throw new Error("Missing the required parameter 'webscrapeRequest' when calling webScrapeWebScrapePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/web_scrape', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
