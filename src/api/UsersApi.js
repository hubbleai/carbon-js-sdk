/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericSuccessResponse from '../model/GenericSuccessResponse';
import HTTPValidationError from '../model/HTTPValidationError';
import ModifyUserConfigurationInput from '../model/ModifyUserConfigurationInput';
import UserRequestContent from '../model/UserRequestContent';
import UserResponse from '../model/UserResponse';

/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the toggleUserFeaturesModifyUserConfigurationPost operation.
     * @callback module:api/UsersApi~toggleUserFeaturesModifyUserConfigurationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle User Features
     * @param {String} authorization 
     * @param {module:model/ModifyUserConfigurationInput} modifyUserConfigurationInput 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/UsersApi~toggleUserFeaturesModifyUserConfigurationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    toggleUserFeaturesModifyUserConfigurationPost(authorization, modifyUserConfigurationInput, opts, callback) {
      opts = opts || {};
      let postBody = modifyUserConfigurationInput;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling toggleUserFeaturesModifyUserConfigurationPost");
      }
      // verify the required parameter 'modifyUserConfigurationInput' is set
      if (modifyUserConfigurationInput === undefined || modifyUserConfigurationInput === null) {
        throw new Error("Missing the required parameter 'modifyUserConfigurationInput' when calling toggleUserFeaturesModifyUserConfigurationPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/modify_user_configuration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userEndpointUserPost operation.
     * @callback module:api/UsersApi~userEndpointUserPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Endpoint
     * @param {String} authorization 
     * @param {module:model/UserRequestContent} userRequestContent 
     * @param {module:api/UsersApi~userEndpointUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResponse}
     */
    userEndpointUserPost(authorization, userRequestContent, callback) {
      let postBody = userRequestContent;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling userEndpointUserPost");
      }
      // verify the required parameter 'userRequestContent' is set
      if (userRequestContent === undefined || userRequestContent === null) {
        throw new Error("Missing the required parameter 'userRequestContent' when calling userEndpointUserPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserResponse;
      return this.apiClient.callApi(
        '/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
