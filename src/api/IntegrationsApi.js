/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FreshDeskConnectRequest from '../model/FreshDeskConnectRequest';
import GenericSuccessResponse from '../model/GenericSuccessResponse';
import GmailSyncInput from '../model/GmailSyncInput';
import HTTPValidationError from '../model/HTTPValidationError';
import ListDataSourceItemsRequest from '../model/ListDataSourceItemsRequest';
import ListDataSourceItemsResponse from '../model/ListDataSourceItemsResponse';
import ListRequest from '../model/ListRequest';
import ListResponse from '../model/ListResponse';
import OAuthURLRequest from '../model/OAuthURLRequest';
import OrganizationUserDataSourceAPI from '../model/OrganizationUserDataSourceAPI';
import OutlookSyncInput from '../model/OutlookSyncInput';
import RSSFeedInput from '../model/RSSFeedInput';
import S3AuthRequest from '../model/S3AuthRequest';
import S3FileSyncInput from '../model/S3FileSyncInput';
import SyncDirectoryRequest from '../model/SyncDirectoryRequest';
import SyncFilesRequest from '../model/SyncFilesRequest';

/**
* Integrations service.
* @module api/IntegrationsApi
* @version 1.0.0
*/
export default class IntegrationsApi {

    /**
    * Constructs a new IntegrationsApi. 
    * @alias module:api/IntegrationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the confluenceListIntegrationsConfluenceListPost operation.
     * @callback module:api/IntegrationsApi~confluenceListIntegrationsConfluenceListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confluence List
     * To begin listing a user's Confluence pages, at least a `data_source_id` of a connected Confluence account must be specified. This base request returns a list of root pages for every space the user has access to in a Confluence instance. To traverse further down the user's page directory, additional requests to this endpoint can be made with the same `data_source_id` and with `parent_id` set to the id of page from a previous request. For convenience, the `has_children` property in each directory item in the response list will flag which pages will return non-empty lists of pages when set as the `parent_id`.
     * @param {String} authorization 
     * @param {module:model/ListRequest} listRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~confluenceListIntegrationsConfluenceListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResponse}
     */
    confluenceListIntegrationsConfluenceListPost(authorization, listRequest, opts, callback) {
      opts = opts || {};
      let postBody = listRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling confluenceListIntegrationsConfluenceListPost");
      }
      // verify the required parameter 'listRequest' is set
      if (listRequest === undefined || listRequest === null) {
        throw new Error("Missing the required parameter 'listRequest' when calling confluenceListIntegrationsConfluenceListPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResponse;
      return this.apiClient.callApi(
        '/integrations/confluence/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confluenceSyncIntegrationsConfluenceSyncPost operation.
     * @callback module:api/IntegrationsApi~confluenceSyncIntegrationsConfluenceSyncPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confluence Sync
     * After listing pages in a user's Confluence account, the set of selected page `ids` and the connected account's `data_source_id` can be passed into this endpoint to sync them into Carbon. Additional parameters listed below can be used to associate data to the selected pages or alter the behavior of the sync.
     * @param {String} authorization 
     * @param {module:model/SyncFilesRequest} syncFilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~confluenceSyncIntegrationsConfluenceSyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    confluenceSyncIntegrationsConfluenceSyncPost(authorization, syncFilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = syncFilesRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling confluenceSyncIntegrationsConfluenceSyncPost");
      }
      // verify the required parameter 'syncFilesRequest' is set
      if (syncFilesRequest === undefined || syncFilesRequest === null) {
        throw new Error("Missing the required parameter 'syncFilesRequest' when calling confluenceSyncIntegrationsConfluenceSyncPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/integrations/confluence/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the freshdeskConnectIntegrationsFreshdeskPost operation.
     * @callback module:api/IntegrationsApi~freshdeskConnectIntegrationsFreshdeskPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Freshdesk Connect
     * Refer this article to obtain an API key https://support.freshdesk.com/en/support/solutions/articles/215517.  Once you have an API key, you can make a request to this endpoint along with your freshdesk domain. This will  trigger an automatic sync of the articles in your \"solutions\" tab. Additional parameters below can be used to associate  data with the synced articles or modify the sync behavior.
     * @param {String} authorization 
     * @param {module:model/FreshDeskConnectRequest} freshDeskConnectRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~freshdeskConnectIntegrationsFreshdeskPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    freshdeskConnectIntegrationsFreshdeskPost(authorization, freshDeskConnectRequest, opts, callback) {
      opts = opts || {};
      let postBody = freshDeskConnectRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling freshdeskConnectIntegrationsFreshdeskPost");
      }
      // verify the required parameter 'freshDeskConnectRequest' is set
      if (freshDeskConnectRequest === undefined || freshDeskConnectRequest === null) {
        throw new Error("Missing the required parameter 'freshDeskConnectRequest' when calling freshdeskConnectIntegrationsFreshdeskPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/integrations/freshdesk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOauthUrlIntegrationsOauthUrlPost operation.
     * @callback module:api/IntegrationsApi~getOauthUrlIntegrationsOauthUrlPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Oauth Url
     * @param {String} authorization 
     * @param {module:model/OAuthURLRequest} oAuthURLRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~getOauthUrlIntegrationsOauthUrlPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getOauthUrlIntegrationsOauthUrlPost(authorization, oAuthURLRequest, opts, callback) {
      opts = opts || {};
      let postBody = oAuthURLRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling getOauthUrlIntegrationsOauthUrlPost");
      }
      // verify the required parameter 'oAuthURLRequest' is set
      if (oAuthURLRequest === undefined || oAuthURLRequest === null) {
        throw new Error("Missing the required parameter 'oAuthURLRequest' when calling getOauthUrlIntegrationsOauthUrlPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/integrations/oauth_url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gmailSyncIntegrationsGmailSyncPost operation.
     * @callback module:api/IntegrationsApi~gmailSyncIntegrationsGmailSyncPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gmail Sync
     * Once you have successfully connected your gmail account, you can choose which emails to sync with us using the filters parameter. Filters is a JSON object with key value pairs. It also supports AND and OR operations. For now, we support a limited set of keys listed below.  label: Inbuilt Gmail labels, for example \"Important\" or a custom label you created.   after or before: A date in YYYY/mm/dd format (example 2023/12/31). Gets emails after/before a certain date. You can also use them in combination to get emails from a certain period.   is: Can have the following values - starred, important, snoozed, and unread    Using keys or values outside of the specified values can lead to unexpected behaviour.  An example of a basic query with filters can be ```json {     \"filters\": {             \"key\": \"label\",             \"value\": \"Test\"         } } ``` Which will list all emails that have the label \"Test\".  You can use AND and OR operation in the following way: ```json {     \"filters\": {         \"AND\": [             {                 \"key\": \"after\",                 \"value\": \"2024/01/07\"             },             {                 \"OR\": [                     {                         \"key\": \"label\",                         \"value\": \"Personal\"                     },                     {                         \"key\": \"is\",                         \"value\": \"starred\"                     }                 ]             }         ]     } } ``` This will return emails after 7th of Jan that are either starred or have the label \"Personal\".  Note that this is the highest level of nesting we support, i.e. you can't add more AND/OR filters within the OR filter in the above example.
     * @param {String} authorization 
     * @param {module:model/GmailSyncInput} gmailSyncInput 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~gmailSyncIntegrationsGmailSyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    gmailSyncIntegrationsGmailSyncPost(authorization, gmailSyncInput, opts, callback) {
      opts = opts || {};
      let postBody = gmailSyncInput;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling gmailSyncIntegrationsGmailSyncPost");
      }
      // verify the required parameter 'gmailSyncInput' is set
      if (gmailSyncInput === undefined || gmailSyncInput === null) {
        throw new Error("Missing the required parameter 'gmailSyncInput' when calling gmailSyncIntegrationsGmailSyncPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/integrations/gmail/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataSourceItemsIntegrationsItemsListPost operation.
     * @callback module:api/IntegrationsApi~listDataSourceItemsIntegrationsItemsListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataSourceItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Data Source Items
     * @param {String} authorization 
     * @param {module:model/ListDataSourceItemsRequest} listDataSourceItemsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~listDataSourceItemsIntegrationsItemsListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataSourceItemsResponse}
     */
    listDataSourceItemsIntegrationsItemsListPost(authorization, listDataSourceItemsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDataSourceItemsRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling listDataSourceItemsIntegrationsItemsListPost");
      }
      // verify the required parameter 'listDataSourceItemsRequest' is set
      if (listDataSourceItemsRequest === undefined || listDataSourceItemsRequest === null) {
        throw new Error("Missing the required parameter 'listDataSourceItemsRequest' when calling listDataSourceItemsIntegrationsItemsListPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDataSourceItemsResponse;
      return this.apiClient.callApi(
        '/integrations/items/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the outlookSyncIntegrationsOutlookSyncPost operation.
     * @callback module:api/IntegrationsApi~outlookSyncIntegrationsOutlookSyncPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Outlook Sync
     * Once you have successfully connected your Outlook account, you can choose which emails to sync with us using the filters and folder parameter. \"folder\" should be the folder you want to sync from Outlook. By default we get messages from your inbox folder.   Filters is a JSON object with key value pairs. It also supports AND and OR operations. For now, we support a limited set of keys listed below.  category: Custom categories that you created in Outlook.   after or before: A date in YYYY/mm/dd format (example 2023/12/31). Gets emails after/before a certain date. You can also use them in combination to get emails from a certain period.     An example of a basic query with filters can be ```json {     \"filters\": {             \"key\": \"category\",             \"value\": \"Test\"         } } ``` Which will list all emails that have the category \"Test\".    Specifying a custom folder in the same query ```json {     \"folder\": \"Folder Name\",     \"filters\": {             \"key\": \"category\",             \"value\": \"Test\"         } } ```  You can use AND and OR operation in the following way: ```json {     \"filters\": {         \"AND\": [             {                 \"key\": \"after\",                 \"value\": \"2024/01/07\"             },             {                 \"OR\": [                     {                         \"key\": \"category\",                         \"value\": \"Personal\"                     },                     {                         \"key\": \"category\",                         \"value\": \"Test\"                     },                 ]             }         ]     } } ``` This will return emails after 7th of Jan that have either Personal or Test as category.  Note that this is the highest level of nesting we support, i.e. you can't add more AND/OR filters within the OR filter in the above example.
     * @param {String} authorization 
     * @param {module:model/OutlookSyncInput} outlookSyncInput 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~outlookSyncIntegrationsOutlookSyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    outlookSyncIntegrationsOutlookSyncPost(authorization, outlookSyncInput, opts, callback) {
      opts = opts || {};
      let postBody = outlookSyncInput;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling outlookSyncIntegrationsOutlookSyncPost");
      }
      // verify the required parameter 'outlookSyncInput' is set
      if (outlookSyncInput === undefined || outlookSyncInput === null) {
        throw new Error("Missing the required parameter 'outlookSyncInput' when calling outlookSyncIntegrationsOutlookSyncPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/integrations/outlook/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rssFeedIntegrationsRssFeedPost operation.
     * @callback module:api/IntegrationsApi~rssFeedIntegrationsRssFeedPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rss Feed
     * @param {String} authorization 
     * @param {module:model/RSSFeedInput} rSSFeedInput 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~rssFeedIntegrationsRssFeedPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    rssFeedIntegrationsRssFeedPost(authorization, rSSFeedInput, opts, callback) {
      opts = opts || {};
      let postBody = rSSFeedInput;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling rssFeedIntegrationsRssFeedPost");
      }
      // verify the required parameter 'rSSFeedInput' is set
      if (rSSFeedInput === undefined || rSSFeedInput === null) {
        throw new Error("Missing the required parameter 'rSSFeedInput' when calling rssFeedIntegrationsRssFeedPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/integrations/rss_feed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the s3AuthIntegrationsS3Post operation.
     * @callback module:api/IntegrationsApi~s3AuthIntegrationsS3PostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationUserDataSourceAPI} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * S3 Auth
     * Create a new IAM user with permissions to: <ol> <li>List all buckets.</li> <li>Read from the specific buckets and objects to sync with Carbon. Ensure any future buckets or objects carry  the same permissions.</li> </ol> Once created, generate an access key for this user and share the credentials with us. We recommend testing this key beforehand.
     * @param {String} authorization 
     * @param {module:model/S3AuthRequest} s3AuthRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~s3AuthIntegrationsS3PostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationUserDataSourceAPI}
     */
    s3AuthIntegrationsS3Post(authorization, s3AuthRequest, opts, callback) {
      opts = opts || {};
      let postBody = s3AuthRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling s3AuthIntegrationsS3Post");
      }
      // verify the required parameter 's3AuthRequest' is set
      if (s3AuthRequest === undefined || s3AuthRequest === null) {
        throw new Error("Missing the required parameter 's3AuthRequest' when calling s3AuthIntegrationsS3Post");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationUserDataSourceAPI;
      return this.apiClient.callApi(
        '/integrations/s3', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the s3FilesIntegrationsS3FilesPost operation.
     * @callback module:api/IntegrationsApi~s3FilesIntegrationsS3FilesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * S3 Files
     * After optionally loading the items via /integrations/items/sync and integrations/items/list, use the bucket name  and object key as the ID in this endpoint to sync them into Carbon. Additional parameters below can associate  data with the selected items or modify the sync behavior
     * @param {String} authorization 
     * @param {module:model/S3FileSyncInput} s3FileSyncInput 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~s3FilesIntegrationsS3FilesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    s3FilesIntegrationsS3FilesPost(authorization, s3FileSyncInput, opts, callback) {
      opts = opts || {};
      let postBody = s3FileSyncInput;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling s3FilesIntegrationsS3FilesPost");
      }
      // verify the required parameter 's3FileSyncInput' is set
      if (s3FileSyncInput === undefined || s3FileSyncInput === null) {
        throw new Error("Missing the required parameter 's3FileSyncInput' when calling s3FilesIntegrationsS3FilesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/integrations/s3/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncDataSourceItemsIntegrationsItemsSyncPost operation.
     * @callback module:api/IntegrationsApi~syncDataSourceItemsIntegrationsItemsSyncPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrganizationUserDataSourceAPI} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync Data Source Items
     * @param {String} authorization 
     * @param {module:model/SyncDirectoryRequest} syncDirectoryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~syncDataSourceItemsIntegrationsItemsSyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrganizationUserDataSourceAPI}
     */
    syncDataSourceItemsIntegrationsItemsSyncPost(authorization, syncDirectoryRequest, opts, callback) {
      opts = opts || {};
      let postBody = syncDirectoryRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling syncDataSourceItemsIntegrationsItemsSyncPost");
      }
      // verify the required parameter 'syncDirectoryRequest' is set
      if (syncDirectoryRequest === undefined || syncDirectoryRequest === null) {
        throw new Error("Missing the required parameter 'syncDirectoryRequest' when calling syncDataSourceItemsIntegrationsItemsSyncPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrganizationUserDataSourceAPI;
      return this.apiClient.callApi(
        '/integrations/items/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the syncFilesIntegrationsFilesSyncPost operation.
     * @callback module:api/IntegrationsApi~syncFilesIntegrationsFilesSyncPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericSuccessResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync Files
     * @param {String} authorization 
     * @param {module:model/SyncFilesRequest} syncFilesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [customerId] 
     * @param {module:api/IntegrationsApi~syncFilesIntegrationsFilesSyncPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericSuccessResponse}
     */
    syncFilesIntegrationsFilesSyncPost(authorization, syncFilesRequest, opts, callback) {
      opts = opts || {};
      let postBody = syncFilesRequest;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling syncFilesIntegrationsFilesSyncPost");
      }
      // verify the required parameter 'syncFilesRequest' is set
      if (syncFilesRequest === undefined || syncFilesRequest === null) {
        throw new Error("Missing the required parameter 'syncFilesRequest' when calling syncFilesIntegrationsFilesSyncPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'authorization': authorization,
        'customer-id': opts['customerId']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericSuccessResponse;
      return this.apiClient.callApi(
        '/integrations/files/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
