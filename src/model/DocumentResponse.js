/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentMetadata from './ContentMetadata';
import DocumentResponseSourceType from './DocumentResponseSourceType';
import PresignedUrl from './PresignedUrl';
import Rank from './Rank';
import Score from './Score';
import Source from './Source';
import SourceUrl from './SourceUrl';
import Tags from './Tags';
import Vector from './Vector';

/**
 * The DocumentResponse model module.
 * @module model/DocumentResponse
 * @version 1.0.0
 */
class DocumentResponse {
    /**
     * Constructs a new <code>DocumentResponse</code>.
     * @alias module:model/DocumentResponse
     * @param content {Object} 
     * @param fileId {Object} 
     * @param source {module:model/Source} 
     * @param sourceUrl {module:model/SourceUrl} 
     * @param sourceType {module:model/DocumentResponseSourceType} 
     * @param presignedUrl {module:model/PresignedUrl} 
     * @param tags {module:model/Tags} 
     * @param vector {module:model/Vector} 
     * @param score {module:model/Score} 
     * @param rank {module:model/Rank} 
     * @param contentMetadata {module:model/ContentMetadata} 
     */
    constructor(content, fileId, source, sourceUrl, sourceType, presignedUrl, tags, vector, score, rank, contentMetadata) { 
        
        DocumentResponse.initialize(this, content, fileId, source, sourceUrl, sourceType, presignedUrl, tags, vector, score, rank, contentMetadata);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, content, fileId, source, sourceUrl, sourceType, presignedUrl, tags, vector, score, rank, contentMetadata) { 
        obj['content'] = content;
        obj['file_id'] = fileId;
        obj['source'] = source;
        obj['source_url'] = sourceUrl;
        obj['source_type'] = sourceType;
        obj['presigned_url'] = presignedUrl;
        obj['tags'] = tags;
        obj['vector'] = vector;
        obj['score'] = score;
        obj['rank'] = rank;
        obj['content_metadata'] = contentMetadata;
    }

    /**
     * Constructs a <code>DocumentResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentResponse} obj Optional instance to populate.
     * @return {module:model/DocumentResponse} The populated <code>DocumentResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentResponse();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], Object);
            }
            if (data.hasOwnProperty('file_id')) {
                obj['file_id'] = ApiClient.convertToType(data['file_id'], Object);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('source_url')) {
                obj['source_url'] = SourceUrl.constructFromObject(data['source_url']);
            }
            if (data.hasOwnProperty('source_type')) {
                obj['source_type'] = DocumentResponseSourceType.constructFromObject(data['source_type']);
            }
            if (data.hasOwnProperty('presigned_url')) {
                obj['presigned_url'] = PresignedUrl.constructFromObject(data['presigned_url']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = Tags.constructFromObject(data['tags']);
            }
            if (data.hasOwnProperty('vector')) {
                obj['vector'] = Vector.constructFromObject(data['vector']);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = Score.constructFromObject(data['score']);
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = Rank.constructFromObject(data['rank']);
            }
            if (data.hasOwnProperty('content_metadata')) {
                obj['content_metadata'] = ContentMetadata.constructFromObject(data['content_metadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentResponse.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Source.validateJSON(data['source']);
        }
        // validate the optional field `source_url`
        if (data['source_url']) { // data not null
          SourceUrl.validateJSON(data['source_url']);
        }
        // validate the optional field `source_type`
        if (data['source_type']) { // data not null
          DocumentResponseSourceType.validateJSON(data['source_type']);
        }
        // validate the optional field `presigned_url`
        if (data['presigned_url']) { // data not null
          PresignedUrl.validateJSON(data['presigned_url']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Tags.validateJSON(data['tags']);
        }
        // validate the optional field `vector`
        if (data['vector']) { // data not null
          Vector.validateJSON(data['vector']);
        }
        // validate the optional field `score`
        if (data['score']) { // data not null
          Score.validateJSON(data['score']);
        }
        // validate the optional field `rank`
        if (data['rank']) { // data not null
          Rank.validateJSON(data['rank']);
        }
        // validate the optional field `content_metadata`
        if (data['content_metadata']) { // data not null
          ContentMetadata.validateJSON(data['content_metadata']);
        }

        return true;
    }


}

DocumentResponse.RequiredProperties = ["content", "file_id", "source", "source_url", "source_type", "presigned_url", "tags", "vector", "score", "rank", "content_metadata"];

/**
 * @member {Object} content
 */
DocumentResponse.prototype['content'] = undefined;

/**
 * @member {Object} file_id
 */
DocumentResponse.prototype['file_id'] = undefined;

/**
 * @member {module:model/Source} source
 */
DocumentResponse.prototype['source'] = undefined;

/**
 * @member {module:model/SourceUrl} source_url
 */
DocumentResponse.prototype['source_url'] = undefined;

/**
 * @member {module:model/DocumentResponseSourceType} source_type
 */
DocumentResponse.prototype['source_type'] = undefined;

/**
 * @member {module:model/PresignedUrl} presigned_url
 */
DocumentResponse.prototype['presigned_url'] = undefined;

/**
 * @member {module:model/Tags} tags
 */
DocumentResponse.prototype['tags'] = undefined;

/**
 * @member {module:model/Vector} vector
 */
DocumentResponse.prototype['vector'] = undefined;

/**
 * @member {module:model/Score} score
 */
DocumentResponse.prototype['score'] = undefined;

/**
 * @member {module:model/Rank} rank
 */
DocumentResponse.prototype['rank'] = undefined;

/**
 * @member {module:model/ContentMetadata} content_metadata
 */
DocumentResponse.prototype['content_metadata'] = undefined;






export default DocumentResponse;

