/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChunkOverlap from './ChunkOverlap';
import ChunkSize from './ChunkSize';
import EmbeddingsAndChunksFiltersEmbeddingModel from './EmbeddingsAndChunksFiltersEmbeddingModel';
import GenerateSparseVectors from './GenerateSparseVectors';
import Name from './Name';
import OverwriteFileId from './OverwriteFileId';

/**
 * The RawTextInput model module.
 * @module model/RawTextInput
 * @version 1.0.0
 */
class RawTextInput {
    /**
     * Constructs a new <code>RawTextInput</code>.
     * @alias module:model/RawTextInput
     * @param contents {Object} 
     */
    constructor(contents) { 
        
        RawTextInput.initialize(this, contents);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contents) { 
        obj['contents'] = contents;
    }

    /**
     * Constructs a <code>RawTextInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RawTextInput} obj Optional instance to populate.
     * @return {module:model/RawTextInput} The populated <code>RawTextInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RawTextInput();

            if (data.hasOwnProperty('contents')) {
                obj['contents'] = ApiClient.convertToType(data['contents'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = Name.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('chunk_size')) {
                obj['chunk_size'] = ChunkSize.constructFromObject(data['chunk_size']);
            }
            if (data.hasOwnProperty('chunk_overlap')) {
                obj['chunk_overlap'] = ChunkOverlap.constructFromObject(data['chunk_overlap']);
            }
            if (data.hasOwnProperty('skip_embedding_generation')) {
                obj['skip_embedding_generation'] = ApiClient.convertToType(data['skip_embedding_generation'], Object);
            }
            if (data.hasOwnProperty('overwrite_file_id')) {
                obj['overwrite_file_id'] = OverwriteFileId.constructFromObject(data['overwrite_file_id']);
            }
            if (data.hasOwnProperty('embedding_model')) {
                obj['embedding_model'] = EmbeddingsAndChunksFiltersEmbeddingModel.constructFromObject(data['embedding_model']);
            }
            if (data.hasOwnProperty('generate_sparse_vectors')) {
                obj['generate_sparse_vectors'] = GenerateSparseVectors.constructFromObject(data['generate_sparse_vectors']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RawTextInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RawTextInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RawTextInput.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          Name.validateJSON(data['name']);
        }
        // validate the optional field `chunk_size`
        if (data['chunk_size']) { // data not null
          ChunkSize.validateJSON(data['chunk_size']);
        }
        // validate the optional field `chunk_overlap`
        if (data['chunk_overlap']) { // data not null
          ChunkOverlap.validateJSON(data['chunk_overlap']);
        }
        // validate the optional field `overwrite_file_id`
        if (data['overwrite_file_id']) { // data not null
          OverwriteFileId.validateJSON(data['overwrite_file_id']);
        }
        // validate the optional field `embedding_model`
        if (data['embedding_model']) { // data not null
          EmbeddingsAndChunksFiltersEmbeddingModel.validateJSON(data['embedding_model']);
        }
        // validate the optional field `generate_sparse_vectors`
        if (data['generate_sparse_vectors']) { // data not null
          GenerateSparseVectors.validateJSON(data['generate_sparse_vectors']);
        }

        return true;
    }


}

RawTextInput.RequiredProperties = ["contents"];

/**
 * @member {Object} contents
 */
RawTextInput.prototype['contents'] = undefined;

/**
 * @member {module:model/Name} name
 */
RawTextInput.prototype['name'] = undefined;

/**
 * @member {module:model/ChunkSize} chunk_size
 */
RawTextInput.prototype['chunk_size'] = undefined;

/**
 * @member {module:model/ChunkOverlap} chunk_overlap
 */
RawTextInput.prototype['chunk_overlap'] = undefined;

/**
 * @member {Object} skip_embedding_generation
 */
RawTextInput.prototype['skip_embedding_generation'] = undefined;

/**
 * @member {module:model/OverwriteFileId} overwrite_file_id
 */
RawTextInput.prototype['overwrite_file_id'] = undefined;

/**
 * @member {module:model/EmbeddingsAndChunksFiltersEmbeddingModel} embedding_model
 */
RawTextInput.prototype['embedding_model'] = undefined;

/**
 * @member {module:model/GenerateSparseVectors} generate_sparse_vectors
 */
RawTextInput.prototype['generate_sparse_vectors'] = undefined;






export default RawTextInput;

