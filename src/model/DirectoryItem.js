/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DirectoryItem model module.
 * @module model/DirectoryItem
 * @version 1.0.0
 */
class DirectoryItem {
    /**
     * Constructs a new <code>DirectoryItem</code>.
     * @alias module:model/DirectoryItem
     * @param id {Object} 
     * @param name {Object} 
     * @param isSynced {Object} 
     * @param hasChildren {Object} 
     */
    constructor(id, name, isSynced, hasChildren) { 
        
        DirectoryItem.initialize(this, id, name, isSynced, hasChildren);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, isSynced, hasChildren) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['is_synced'] = isSynced;
        obj['has_children'] = hasChildren;
    }

    /**
     * Constructs a <code>DirectoryItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DirectoryItem} obj Optional instance to populate.
     * @return {module:model/DirectoryItem} The populated <code>DirectoryItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DirectoryItem();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], Object);
            }
            if (data.hasOwnProperty('is_synced')) {
                obj['is_synced'] = ApiClient.convertToType(data['is_synced'], Object);
            }
            if (data.hasOwnProperty('has_children')) {
                obj['has_children'] = ApiClient.convertToType(data['has_children'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DirectoryItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DirectoryItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DirectoryItem.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

DirectoryItem.RequiredProperties = ["id", "name", "is_synced", "has_children"];

/**
 * @member {Object} id
 */
DirectoryItem.prototype['id'] = undefined;

/**
 * @member {Object} name
 */
DirectoryItem.prototype['name'] = undefined;

/**
 * @member {Object} is_synced
 */
DirectoryItem.prototype['is_synced'] = undefined;

/**
 * @member {Object} has_children
 */
DirectoryItem.prototype['has_children'] = undefined;






export default DirectoryItem;

