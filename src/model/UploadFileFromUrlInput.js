/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChunkOverlap from './ChunkOverlap';
import ChunkSize from './ChunkSize';
import EmbeddingGenerators from './EmbeddingGenerators';
import FileName from './FileName';
import MaxItemsPerChunk from './MaxItemsPerChunk';

/**
 * The UploadFileFromUrlInput model module.
 * @module model/UploadFileFromUrlInput
 * @version 1.0.0
 */
class UploadFileFromUrlInput {
    /**
     * Constructs a new <code>UploadFileFromUrlInput</code>.
     * @alias module:model/UploadFileFromUrlInput
     * @param url {Object} 
     */
    constructor(url) { 
        
        UploadFileFromUrlInput.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['url'] = url;
    }

    /**
     * Constructs a <code>UploadFileFromUrlInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadFileFromUrlInput} obj Optional instance to populate.
     * @return {module:model/UploadFileFromUrlInput} The populated <code>UploadFileFromUrlInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadFileFromUrlInput();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], Object);
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = FileName.constructFromObject(data['file_name']);
            }
            if (data.hasOwnProperty('chunk_size')) {
                obj['chunk_size'] = ChunkSize.constructFromObject(data['chunk_size']);
            }
            if (data.hasOwnProperty('chunk_overlap')) {
                obj['chunk_overlap'] = ChunkOverlap.constructFromObject(data['chunk_overlap']);
            }
            if (data.hasOwnProperty('skip_embedding_generation')) {
                obj['skip_embedding_generation'] = ApiClient.convertToType(data['skip_embedding_generation'], Object);
            }
            if (data.hasOwnProperty('set_page_as_boundary')) {
                obj['set_page_as_boundary'] = ApiClient.convertToType(data['set_page_as_boundary'], Object);
            }
            if (data.hasOwnProperty('embedding_model')) {
                obj['embedding_model'] = ApiClient.convertToType(data['embedding_model'], EmbeddingGenerators);
            }
            if (data.hasOwnProperty('generate_sparse_vectors')) {
                obj['generate_sparse_vectors'] = ApiClient.convertToType(data['generate_sparse_vectors'], Object);
            }
            if (data.hasOwnProperty('use_textract')) {
                obj['use_textract'] = ApiClient.convertToType(data['use_textract'], Object);
            }
            if (data.hasOwnProperty('prepend_filename_to_chunks')) {
                obj['prepend_filename_to_chunks'] = ApiClient.convertToType(data['prepend_filename_to_chunks'], Object);
            }
            if (data.hasOwnProperty('max_items_per_chunk')) {
                obj['max_items_per_chunk'] = MaxItemsPerChunk.constructFromObject(data['max_items_per_chunk']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadFileFromUrlInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadFileFromUrlInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadFileFromUrlInput.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `file_name`
        if (data['file_name']) { // data not null
          FileName.validateJSON(data['file_name']);
        }
        // validate the optional field `chunk_size`
        if (data['chunk_size']) { // data not null
          ChunkSize.validateJSON(data['chunk_size']);
        }
        // validate the optional field `chunk_overlap`
        if (data['chunk_overlap']) { // data not null
          ChunkOverlap.validateJSON(data['chunk_overlap']);
        }
        // validate the optional field `max_items_per_chunk`
        if (data['max_items_per_chunk']) { // data not null
          MaxItemsPerChunk.validateJSON(data['max_items_per_chunk']);
        }

        return true;
    }


}

UploadFileFromUrlInput.RequiredProperties = ["url"];

/**
 * @member {Object} url
 */
UploadFileFromUrlInput.prototype['url'] = undefined;

/**
 * @member {module:model/FileName} file_name
 */
UploadFileFromUrlInput.prototype['file_name'] = undefined;

/**
 * @member {module:model/ChunkSize} chunk_size
 */
UploadFileFromUrlInput.prototype['chunk_size'] = undefined;

/**
 * @member {module:model/ChunkOverlap} chunk_overlap
 */
UploadFileFromUrlInput.prototype['chunk_overlap'] = undefined;

/**
 * @member {Object} skip_embedding_generation
 */
UploadFileFromUrlInput.prototype['skip_embedding_generation'] = undefined;

/**
 * @member {Object} set_page_as_boundary
 */
UploadFileFromUrlInput.prototype['set_page_as_boundary'] = undefined;

/**
 * @member {module:model/EmbeddingGenerators} embedding_model
 */
UploadFileFromUrlInput.prototype['embedding_model'] = undefined;

/**
 * @member {Object} generate_sparse_vectors
 */
UploadFileFromUrlInput.prototype['generate_sparse_vectors'] = undefined;

/**
 * @member {Object} use_textract
 */
UploadFileFromUrlInput.prototype['use_textract'] = undefined;

/**
 * @member {Object} prepend_filename_to_chunks
 */
UploadFileFromUrlInput.prototype['prepend_filename_to_chunks'] = undefined;

/**
 * @member {module:model/MaxItemsPerChunk} max_items_per_chunk
 */
UploadFileFromUrlInput.prototype['max_items_per_chunk'] = undefined;






export default UploadFileFromUrlInput;

