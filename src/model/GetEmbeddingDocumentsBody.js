/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileIds1 from './FileIds1';
import GetEmbeddingDocumentsBodyEmbeddingModel from './GetEmbeddingDocumentsBodyEmbeddingModel';
import GetEmbeddingDocumentsBodyHybridSearchTuningParameters from './GetEmbeddingDocumentsBodyHybridSearchTuningParameters';
import GetEmbeddingDocumentsBodyMediaType from './GetEmbeddingDocumentsBodyMediaType';
import HybridSearch from './HybridSearch';
import IncludeRawFile from './IncludeRawFile';
import IncludeTags from './IncludeTags';
import IncludeVectors from './IncludeVectors';
import ParentFileIds from './ParentFileIds';
import QueryVector from './QueryVector';
import Tags2 from './Tags2';
import TagsV2 from './TagsV2';

/**
 * The GetEmbeddingDocumentsBody model module.
 * @module model/GetEmbeddingDocumentsBody
 * @version 1.0.0
 */
class GetEmbeddingDocumentsBody {
    /**
     * Constructs a new <code>GetEmbeddingDocumentsBody</code>.
     * @alias module:model/GetEmbeddingDocumentsBody
     * @param query {Object} Query for which to get related chunks and embeddings.
     * @param k {Object} Number of related chunks to return.
     */
    constructor(query, k) { 
        
        GetEmbeddingDocumentsBody.initialize(this, query, k);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, query, k) { 
        obj['query'] = query;
        obj['k'] = k;
    }

    /**
     * Constructs a <code>GetEmbeddingDocumentsBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetEmbeddingDocumentsBody} obj Optional instance to populate.
     * @return {module:model/GetEmbeddingDocumentsBody} The populated <code>GetEmbeddingDocumentsBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetEmbeddingDocumentsBody();

            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], Object);
            }
            if (data.hasOwnProperty('query_vector')) {
                obj['query_vector'] = QueryVector.constructFromObject(data['query_vector']);
            }
            if (data.hasOwnProperty('k')) {
                obj['k'] = ApiClient.convertToType(data['k'], Object);
            }
            if (data.hasOwnProperty('file_ids')) {
                obj['file_ids'] = FileIds1.constructFromObject(data['file_ids']);
            }
            if (data.hasOwnProperty('parent_file_ids')) {
                obj['parent_file_ids'] = ParentFileIds.constructFromObject(data['parent_file_ids']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = Tags2.constructFromObject(data['tags']);
            }
            if (data.hasOwnProperty('tags_v2')) {
                obj['tags_v2'] = TagsV2.constructFromObject(data['tags_v2']);
            }
            if (data.hasOwnProperty('include_tags')) {
                obj['include_tags'] = IncludeTags.constructFromObject(data['include_tags']);
            }
            if (data.hasOwnProperty('include_vectors')) {
                obj['include_vectors'] = IncludeVectors.constructFromObject(data['include_vectors']);
            }
            if (data.hasOwnProperty('include_raw_file')) {
                obj['include_raw_file'] = IncludeRawFile.constructFromObject(data['include_raw_file']);
            }
            if (data.hasOwnProperty('hybrid_search')) {
                obj['hybrid_search'] = HybridSearch.constructFromObject(data['hybrid_search']);
            }
            if (data.hasOwnProperty('hybrid_search_tuning_parameters')) {
                obj['hybrid_search_tuning_parameters'] = GetEmbeddingDocumentsBodyHybridSearchTuningParameters.constructFromObject(data['hybrid_search_tuning_parameters']);
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = GetEmbeddingDocumentsBodyMediaType.constructFromObject(data['media_type']);
            }
            if (data.hasOwnProperty('embedding_model')) {
                obj['embedding_model'] = GetEmbeddingDocumentsBodyEmbeddingModel.constructFromObject(data['embedding_model']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetEmbeddingDocumentsBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetEmbeddingDocumentsBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetEmbeddingDocumentsBody.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `query_vector`
        if (data['query_vector']) { // data not null
          QueryVector.validateJSON(data['query_vector']);
        }
        // validate the optional field `file_ids`
        if (data['file_ids']) { // data not null
          FileIds1.validateJSON(data['file_ids']);
        }
        // validate the optional field `parent_file_ids`
        if (data['parent_file_ids']) { // data not null
          ParentFileIds.validateJSON(data['parent_file_ids']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Tags2.validateJSON(data['tags']);
        }
        // validate the optional field `tags_v2`
        if (data['tags_v2']) { // data not null
          TagsV2.validateJSON(data['tags_v2']);
        }
        // validate the optional field `include_tags`
        if (data['include_tags']) { // data not null
          IncludeTags.validateJSON(data['include_tags']);
        }
        // validate the optional field `include_vectors`
        if (data['include_vectors']) { // data not null
          IncludeVectors.validateJSON(data['include_vectors']);
        }
        // validate the optional field `include_raw_file`
        if (data['include_raw_file']) { // data not null
          IncludeRawFile.validateJSON(data['include_raw_file']);
        }
        // validate the optional field `hybrid_search`
        if (data['hybrid_search']) { // data not null
          HybridSearch.validateJSON(data['hybrid_search']);
        }
        // validate the optional field `hybrid_search_tuning_parameters`
        if (data['hybrid_search_tuning_parameters']) { // data not null
          GetEmbeddingDocumentsBodyHybridSearchTuningParameters.validateJSON(data['hybrid_search_tuning_parameters']);
        }
        // validate the optional field `media_type`
        if (data['media_type']) { // data not null
          GetEmbeddingDocumentsBodyMediaType.validateJSON(data['media_type']);
        }
        // validate the optional field `embedding_model`
        if (data['embedding_model']) { // data not null
          GetEmbeddingDocumentsBodyEmbeddingModel.validateJSON(data['embedding_model']);
        }

        return true;
    }


}

GetEmbeddingDocumentsBody.RequiredProperties = ["query", "k"];

/**
 * Query for which to get related chunks and embeddings.
 * @member {Object} query
 */
GetEmbeddingDocumentsBody.prototype['query'] = undefined;

/**
 * @member {module:model/QueryVector} query_vector
 */
GetEmbeddingDocumentsBody.prototype['query_vector'] = undefined;

/**
 * Number of related chunks to return.
 * @member {Object} k
 */
GetEmbeddingDocumentsBody.prototype['k'] = undefined;

/**
 * @member {module:model/FileIds1} file_ids
 */
GetEmbeddingDocumentsBody.prototype['file_ids'] = undefined;

/**
 * @member {module:model/ParentFileIds} parent_file_ids
 */
GetEmbeddingDocumentsBody.prototype['parent_file_ids'] = undefined;

/**
 * @member {module:model/Tags2} tags
 */
GetEmbeddingDocumentsBody.prototype['tags'] = undefined;

/**
 * @member {module:model/TagsV2} tags_v2
 */
GetEmbeddingDocumentsBody.prototype['tags_v2'] = undefined;

/**
 * @member {module:model/IncludeTags} include_tags
 */
GetEmbeddingDocumentsBody.prototype['include_tags'] = undefined;

/**
 * @member {module:model/IncludeVectors} include_vectors
 */
GetEmbeddingDocumentsBody.prototype['include_vectors'] = undefined;

/**
 * @member {module:model/IncludeRawFile} include_raw_file
 */
GetEmbeddingDocumentsBody.prototype['include_raw_file'] = undefined;

/**
 * @member {module:model/HybridSearch} hybrid_search
 */
GetEmbeddingDocumentsBody.prototype['hybrid_search'] = undefined;

/**
 * @member {module:model/GetEmbeddingDocumentsBodyHybridSearchTuningParameters} hybrid_search_tuning_parameters
 */
GetEmbeddingDocumentsBody.prototype['hybrid_search_tuning_parameters'] = undefined;

/**
 * @member {module:model/GetEmbeddingDocumentsBodyMediaType} media_type
 */
GetEmbeddingDocumentsBody.prototype['media_type'] = undefined;

/**
 * @member {module:model/GetEmbeddingDocumentsBodyEmbeddingModel} embedding_model
 */
GetEmbeddingDocumentsBody.prototype['embedding_model'] = undefined;






export default GetEmbeddingDocumentsBody;

