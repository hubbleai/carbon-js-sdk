/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CarbonJsSdk);
  }
}(this, function(expect, CarbonJsSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CarbonJsSdk.UserFile();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserFile', function() {
    it('should create an instance of UserFile', function() {
      // uncomment below and update the code to test UserFile
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be.a(CarbonJsSdk.UserFile);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property organizationId (base name: "organization_id")', function() {
      // uncomment below and update the code to test the property organizationId
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property organizationSuppliedUserId (base name: "organization_supplied_user_id")', function() {
      // uncomment below and update the code to test the property organizationSuppliedUserId
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property organizationUserDataSourceId (base name: "organization_user_data_source_id")', function() {
      // uncomment below and update the code to test the property organizationUserDataSourceId
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property externalFileId (base name: "external_file_id")', function() {
      // uncomment below and update the code to test the property externalFileId
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property externalUrl (base name: "external_url")', function() {
      // uncomment below and update the code to test the property externalUrl
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property syncStatus (base name: "sync_status")', function() {
      // uncomment below and update the code to test the property syncStatus
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property syncErrorMessage (base name: "sync_error_message")', function() {
      // uncomment below and update the code to test the property syncErrorMessage
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property lastSync (base name: "last_sync")', function() {
      // uncomment below and update the code to test the property lastSync
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property fileStatistics (base name: "file_statistics")', function() {
      // uncomment below and update the code to test the property fileStatistics
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property fileMetadata (base name: "file_metadata")', function() {
      // uncomment below and update the code to test the property fileMetadata
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property embeddingProperties (base name: "embedding_properties")', function() {
      // uncomment below and update the code to test the property embeddingProperties
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property chunkSize (base name: "chunk_size")', function() {
      // uncomment below and update the code to test the property chunkSize
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property chunkOverlap (base name: "chunk_overlap")', function() {
      // uncomment below and update the code to test the property chunkOverlap
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property chunkProperties (base name: "chunk_properties")', function() {
      // uncomment below and update the code to test the property chunkProperties
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parent_id")', function() {
      // uncomment below and update the code to test the property parentId
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property enableAutoSync (base name: "enable_auto_sync")', function() {
      // uncomment below and update the code to test the property enableAutoSync
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property presignedUrl (base name: "presigned_url")', function() {
      // uncomment below and update the code to test the property presignedUrl
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property parsedTextUrl (base name: "parsed_text_url")', function() {
      // uncomment below and update the code to test the property parsedTextUrl
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property additionalPresignedUrls (base name: "additional_presigned_urls")', function() {
      // uncomment below and update the code to test the property additionalPresignedUrls
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property skipEmbeddingGeneration (base name: "skip_embedding_generation")', function() {
      // uncomment below and update the code to test the property skipEmbeddingGeneration
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property sourceCreatedAt (base name: "source_created_at")', function() {
      // uncomment below and update the code to test the property sourceCreatedAt
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property generateSparseVectors (base name: "generate_sparse_vectors")', function() {
      // uncomment below and update the code to test the property generateSparseVectors
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new CarbonJsSdk.UserFile();
      //expect(instance).to.be();
    });

  });

}));
