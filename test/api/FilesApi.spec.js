/**
 * Carbon
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CarbonJsSdk);
  }
}(this, function(expect, CarbonJsSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CarbonJsSdk.FilesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FilesApi', function() {
    describe('createFileTagsCreateUserFileTagsPost', function() {
      it('should call createFileTagsCreateUserFileTagsPost successfully', function(done) {
        //uncomment below and update the code to test createFileTagsCreateUserFileTagsPost
        //instance.createFileTagsCreateUserFileTagsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRawTextUploadTextPost', function() {
      it('should call createRawTextUploadTextPost successfully', function(done) {
        //uncomment below and update the code to test createRawTextUploadTextPost
        //instance.createRawTextUploadTextPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUploadFileFromUrlUploadFileFromUrlPost', function() {
      it('should call createUploadFileFromUrlUploadFileFromUrlPost successfully', function(done) {
        //uncomment below and update the code to test createUploadFileFromUrlUploadFileFromUrlPost
        //instance.createUploadFileFromUrlUploadFileFromUrlPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUploadFileUploadfilePost', function() {
      it('should call createUploadFileUploadfilePost successfully', function(done) {
        //uncomment below and update the code to test createUploadFileUploadfilePost
        //instance.createUploadFileUploadfilePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFileEndpointDeletefileFileIdDelete', function() {
      it('should call deleteFileEndpointDeletefileFileIdDelete successfully', function(done) {
        //uncomment below and update the code to test deleteFileEndpointDeletefileFileIdDelete
        //instance.deleteFileEndpointDeletefileFileIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFileTagsDeleteUserFileTagsPost', function() {
      it('should call deleteFileTagsDeleteUserFileTagsPost successfully', function(done) {
        //uncomment below and update the code to test deleteFileTagsDeleteUserFileTagsPost
        //instance.deleteFileTagsDeleteUserFileTagsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFilesEndpointDeleteFilesPost', function() {
      it('should call deleteFilesEndpointDeleteFilesPost successfully', function(done) {
        //uncomment below and update the code to test deleteFilesEndpointDeleteFilesPost
        //instance.deleteFilesEndpointDeleteFilesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('parsedFileParsedFileFileIdGet', function() {
      it('should call parsedFileParsedFileFileIdGet successfully', function(done) {
        //uncomment below and update the code to test parsedFileParsedFileFileIdGet
        //instance.parsedFileParsedFileFileIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rawFileRawFileFileIdGet', function() {
      it('should call rawFileRawFileFileIdGet successfully', function(done) {
        //uncomment below and update the code to test rawFileRawFileFileIdGet
        //instance.rawFileRawFileFileIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resyncFileResyncFilePost', function() {
      it('should call resyncFileResyncFilePost successfully', function(done) {
        //uncomment below and update the code to test resyncFileResyncFilePost
        //instance.resyncFileResyncFilePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userFilesUserFilesPost', function() {
      it('should call userFilesUserFilesPost successfully', function(done) {
        //uncomment below and update the code to test userFilesUserFilesPost
        //instance.userFilesUserFilesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userFilesV2UserFilesV2Post', function() {
      it('should call userFilesV2UserFilesV2Post successfully', function(done) {
        //uncomment below and update the code to test userFilesV2UserFilesV2Post
        //instance.userFilesV2UserFilesV2Post(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
